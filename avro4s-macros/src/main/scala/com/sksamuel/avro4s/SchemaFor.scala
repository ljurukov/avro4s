package com.sksamuel.avro4s

import java.nio.ByteBuffer
import java.sql.Timestamp
import java.time.{Instant, LocalDate, LocalDateTime, LocalTime}
import java.util.UUID

import org.apache.avro.{JsonProperties, LogicalTypes, Schema, SchemaBuilder}
import shapeless.ops.coproduct.Reify
import shapeless.ops.hlist.ToList
import shapeless.{Coproduct, Generic, HList}

import scala.language.experimental.macros
import scala.math.BigDecimal.RoundingMode.{RoundingMode, UNNECESSARY}
import scala.reflect.ClassTag
import scala.reflect.internal.{Definitions, StdNames, SymbolTable}
import scala.reflect.macros.whitebox
import scala.reflect.runtime.currentMirror
import scala.tools.reflect.ToolBox
import scala.reflect.runtime.universe._

/**
  * A [[SchemaFor]] generates an Avro Schema for a Scala or Java type.
  *
  * For example, a String SchemaFor could return an instance of Schema.Type.STRING
  * or Schema.Type.FIXED depending on the type required for Strings.
  */
trait SchemaFor[T] extends Serializable {
  self =>

  def schema: Schema

  /**
    * Creates a SchemaFor[U] by applying a function Schema => Schema
    * to the schema generated by this instance.
    */
  def map[U](fn: Schema => Schema): SchemaFor[U] = new SchemaFor[U] {
    override def schema: Schema = fn(self.schema)
  }
}

case class ScalePrecisionRoundingMode(scale: Int, precision: Int, roundingMode: RoundingMode)

object ScalePrecisionRoundingMode {
  implicit val default = ScalePrecisionRoundingMode(2, 8, UNNECESSARY)
}

object SchemaFor extends TupleSchemaFor with CoproductSchemaFor {

  import scala.collection.JavaConverters._

  def apply[T](implicit schemaFor: SchemaFor[T]): SchemaFor[T] = schemaFor

  /**
    * Creates a [[SchemaFor]] that always returns the given constant value.
    */
  def const[T](_schema: Schema) = new SchemaFor[T] {
    override def schema: Schema = _schema
  }

  implicit val StringSchemaFor: SchemaFor[String] = const(SchemaBuilder.builder.stringType)
  implicit val LongSchemaFor: SchemaFor[Long] = const(SchemaBuilder.builder.longType)
  implicit val IntSchemaFor: SchemaFor[Int] = const(SchemaBuilder.builder.intType)
  implicit val DoubleSchemaFor: SchemaFor[Double] = const(SchemaBuilder.builder.doubleType)
  implicit val FloatSchemaFor: SchemaFor[Float] = const(SchemaBuilder.builder.floatType)
  implicit val BooleanSchemaFor: SchemaFor[Boolean] = const(SchemaBuilder.builder.booleanType)
  implicit val ByteArraySchemaFor: SchemaFor[Array[Byte]] = const(SchemaBuilder.builder.bytesType)
  implicit val ByteSeqSchemaFor: SchemaFor[Seq[Byte]] = const(SchemaBuilder.builder.bytesType)
  implicit val ByteListSchemaFor: SchemaFor[List[Byte]] = const(SchemaBuilder.builder.bytesType)
  implicit val ByteVectorSchemaFor: SchemaFor[Vector[Byte]] = const(SchemaBuilder.builder.bytesType)
  implicit val ByteBufferSchemaFor: SchemaFor[ByteBuffer] = const(SchemaBuilder.builder.bytesType)
  implicit val ShortSchemaFor: SchemaFor[Short] = const(IntSchemaFor.schema)
  implicit val ByteSchemaFor: SchemaFor[Byte] = const(IntSchemaFor.schema)

  implicit object UUIDSchemaFor extends SchemaFor[UUID] {
    override def schema: Schema = LogicalTypes.uuid().addToSchema(SchemaBuilder.builder.stringType)
  }

  implicit def mapSchemaFor[V](implicit schemaFor: SchemaFor[V]): SchemaFor[Map[String, V]] = {
    new SchemaFor[Map[String, V]] {
      override def schema: Schema = SchemaBuilder.map().values(schemaFor.schema)
    }
  }

  implicit def bigDecimalFor(implicit sp: ScalePrecisionRoundingMode = ScalePrecisionRoundingMode.default): SchemaFor[BigDecimal] = new SchemaFor[BigDecimal] {
    override def schema = LogicalTypes.decimal(sp.precision, sp.scale).addToSchema(SchemaBuilder.builder.bytesType)
  }

  implicit def eitherSchemaFor[A, B](implicit leftFor: SchemaFor[A], rightFor: SchemaFor[B]): SchemaFor[Either[A, B]] = {
    new SchemaFor[Either[A, B]] {
      override def schema: Schema = Schema.createUnion(leftFor.schema, rightFor.schema)
    }
  }

  implicit def optionSchemaFor[T](implicit schemaFor: SchemaFor[T]): SchemaFor[Option[T]] = new SchemaFor[Option[T]] {
    override def schema: Schema = {
      val elementSchema = schemaFor.schema
      val nullSchema = SchemaBuilder.builder().nullType()
      SchemaHelper.createSafeUnion(elementSchema, nullSchema)
    }
  }

  implicit def arraySchemaFor[S](implicit schemaFor: SchemaFor[S]): SchemaFor[Array[S]] = {
    new SchemaFor[Array[S]] {
      override def schema: Schema = Schema.createArray(schemaFor.schema)
    }
  }

  implicit def listSchemaFor[S](implicit schemaFor: SchemaFor[S]): SchemaFor[List[S]] = {
    new SchemaFor[List[S]] {
      override def schema: Schema = Schema.createArray(schemaFor.schema)
    }
  }

  implicit def setSchemaFor[S](implicit schemaFor: SchemaFor[S]): SchemaFor[Set[S]] = {
    new SchemaFor[Set[S]] {
      override def schema: Schema = Schema.createArray(schemaFor.schema)
    }
  }

  implicit def vectorSchemaFor[S](implicit schemaFor: SchemaFor[S]): SchemaFor[Vector[S]] = {
    new SchemaFor[Vector[S]] {
      override def schema: Schema = Schema.createArray(schemaFor.schema)
    }
  }

  implicit def seqSchemaFor[S](implicit schemaFor: SchemaFor[S]): SchemaFor[Seq[S]] = {
    new SchemaFor[Seq[S]] {
      override def schema: Schema = Schema.createArray(schemaFor.schema)
    }
  }

  implicit def iterableSchemaFor[S](implicit schemaFor: SchemaFor[S]): SchemaFor[Iterable[S]] = {
    new SchemaFor[Iterable[S]] {
      override def schema: Schema = Schema.createArray(schemaFor.schema)
    }
  }

  implicit object TimestampSchemaFor extends SchemaFor[Timestamp] {
    override def schema = LogicalTypes.timestampMillis().addToSchema(SchemaBuilder.builder.longType)
  }

  implicit object LocalTimeSchemaFor extends SchemaFor[LocalTime] {
    override def schema = LogicalTypes.timeMillis().addToSchema(SchemaBuilder.builder.intType)
  }

  implicit object LocalDateSchemaFor extends SchemaFor[LocalDate] {
    override def schema = LogicalTypes.date().addToSchema(SchemaBuilder.builder.intType)
  }

  implicit object LocalDateTimeSchemaFor extends SchemaFor[LocalDateTime] {
    override def schema = LogicalTypes.timestampMillis().addToSchema(SchemaBuilder.builder.longType)
  }

  implicit object DateSchemaFor extends SchemaFor[java.sql.Date] {
    override def schema = LogicalTypes.date().addToSchema(SchemaBuilder.builder.intType)
  }

  implicit object InstantSchemaFor extends SchemaFor[Instant] {
    override def schema = LogicalTypes.timestampMillis().addToSchema(SchemaBuilder.builder.longType)
  }

  implicit def javaEnumSchemaFor[E <: Enum[_]](implicit tag: ClassTag[E]): SchemaFor[E] = new SchemaFor[E] {
    override def schema: Schema = {

      val annos = tag.runtimeClass.getAnnotations.toList.map { a =>
        Anno(a.annotationType.getClass.getName, null)
      }

      val extractor = new AnnotationExtractors(annos)

      val name = tag.runtimeClass.getSimpleName
      val namespace = extractor.namespace.getOrElse(tag.runtimeClass.getPackage.getName)
      val symbols = tag.runtimeClass.getEnumConstants.map(_.toString)

      SchemaBuilder.enumeration(name).namespace(namespace).symbols(symbols: _*)
    }
  }

  implicit def scalaEnumSchemaFor[E <: scala.Enumeration#Value](implicit tag: TypeTag[E]): SchemaFor[E] = new SchemaFor[E] {

    val typeRef = tag.tpe match {
      case t@TypeRef(_, _, _) => t
    }

    val valueType = typeOf[E]
    val pre = typeRef.pre.typeSymbol.typeSignature.members
    val syms = pre.filter { sym =>
      !sym.isMethod &&
        !sym.isType &&
        sym.typeSignature.baseType(valueType.typeSymbol) =:= valueType
    }.map { sym =>
      sym.name.decodedName.toString.trim
    }.toList.sorted

    val annos = typeRef.pre.typeSymbol.annotations.map { a =>
      val name = a.tree.tpe.typeSymbol.fullName
      var args = Map.empty[String, AnyRef]
      try {
        val tb = currentMirror.mkToolBox()
        args = tb.parse(a.toString) match {
          case c: AvroFieldReflection => c.getAllFields
          case _ => Map.empty[String, AnyRef]
        }
      }catch {
        case e : Throwable => e.printStackTrace()
      }
      Anno(name, args)
    }

    val extractor = new AnnotationExtractors(annos)

    val namespace = extractor.namespace.getOrElse(typeRef.pre.typeSymbol.owner.fullName)
    val name = extractor.name.getOrElse(typeRef.pre.typeSymbol.name.decodedName.toString)

    override def schema: Schema = SchemaBuilder.enumeration(name).namespace(namespace).symbols(syms: _*)
  }

  implicit def genCoproductSingletons[T, C <: Coproduct, L <: HList](implicit ct: ClassTag[T],
                                                                     tag: TypeTag[T],
                                                                     gen: Generic.Aux[T, C],
                                                                     objs: Reify.Aux[C, L],
                                                                     toList: ToList[L, T]): SchemaFor[T] = new SchemaFor[T] {
    val tpe = weakTypeTag[T]
    val nr = NameResolution(tpe.tpe)
    val symbols = toList(objs()).map(v => NameResolution(v.getClass).name)

    override def schema: Schema = SchemaBuilder.enumeration(nr.name).namespace(nr.namespace).symbols(symbols: _*)
  }

  implicit def applyMacro[T]: SchemaFor[T] = macro applyMacroImpl[T]

  def applyMacroImpl[T: c.WeakTypeTag](c: whitebox.Context): c.Expr[SchemaFor[T]] = {
    import c.universe
    import c.universe._

    val reflect = ReflectHelper(c)
    val tpe = weakTypeOf[T]
    val fullName = tpe.typeSymbol.fullName
    val packageName = reflect.packageName(tpe)
    val resolution = NameResolution(c)(tpe)
    val namespace = resolution.namespace
    val name = resolution.name

    if (!reflect.isCaseClass(tpe)) {
      c.abort(c.prefix.tree.pos, s"$fullName is not a case class: This macro is only designed to handle case classes")
    } else if (reflect.isSealed(tpe)) {
      c.abort(c.prefix.tree.pos, s"$fullName is sealed: Sealed traits/classes should be handled by coproduct generic")
    } else if (packageName.startsWith("scala") || packageName.startsWith("java")) {
      c.abort(c.prefix.tree.pos, s"$fullName is a library type: Built in types should be handled by explicit typeclasses of SchemaFor and not this macro")
    } else if (reflect.isScalaEnum(tpe)) {
      c.abort(c.prefix.tree.pos, s"$fullName is a scala enum: Scala enum types should be handled by `scalaEnumSchemaFor`")
    } else {

      val isValueClass = reflect.isValueClass(tpe)

      val fields = reflect
        .constructorParameters(tpe)
        .zipWithIndex
        .filterNot { case ((fieldSym, _), _) => reflect.isTransientOnField(tpe, fieldSym) }
        .map { case ((fieldSym, fieldTpe), index) =>

          // the simple name of the field like "x"
          val fieldName = fieldSym.name.decodedName.toString.trim

          // if the field is a value type, we should include annotations defined on the value type as well
          val annos = if (reflect.isValueClass(fieldTpe)) {
            reflect.annotationsqq(fieldSym) ++ reflect.annotationsqq(fieldTpe.typeSymbol)
          } else {
            reflect.annotationsqq(fieldSym)
          }

          val defswithsymbols = universe.asInstanceOf[Definitions with SymbolTable with StdNames]

          // gets the method symbol for the default getter if it exists
          val defaultGetterName = defswithsymbols.nme.defaultGetterName(defswithsymbols.nme.CONSTRUCTOR, index + 1)
          val defaultGetterMethod = tpe.companion.member(TermName(defaultGetterName.toString))

          // if the default getter exists then we can use it to generate the default value
          if (defaultGetterMethod.isMethod) {
            val moduleSym = tpe.typeSymbol.companion
            q"""{ _root_.com.sksamuel.avro4s.SchemaFor.schemaFieldWithDefault[$fieldTpe]($fieldName, $namespace, Seq(..$annos), $moduleSym.$defaultGetterMethod) }"""
          } else {
            q"""{ _root_.com.sksamuel.avro4s.SchemaFor.schemaFieldNoDefault[$fieldTpe]($fieldName, $namespace, Seq(..$annos)) }"""
          }
        }

      // these are annotations on the class itself
      val annos = reflect.annotationsqq(tpe.typeSymbol)

      c.Expr[SchemaFor[T]](
        q"""
        new _root_.com.sksamuel.avro4s.SchemaFor[$tpe] {
          private val _schema = _root_.com.sksamuel.avro4s.SchemaFor.buildSchema($name, $namespace, Seq(..$fields), Seq(..$annos), $isValueClass)
          override def schema: _root_.org.apache.avro.Schema = _schema
        }
      """)
    }
  }

  def schemaFieldNoDefault[B](fieldName: String, namespace: String, annos: Seq[Anno])
                             (implicit schemaFor: SchemaFor[B], namingStrategy: NamingStrategy = DefaultNamingStrategy): Schema.Field = {
    schemaField[B](fieldName, namespace, annos, NoDefault)(schemaFor, namingStrategy)
  }

  def schemaFieldWithDefault[B](fieldName: String, namespace: String, annos: Seq[Anno], default: B)
                               (implicit schemaFor: SchemaFor[B], encoder: Encoder[B], namingStrategy: NamingStrategy = DefaultNamingStrategy): Schema.Field = {
    // the default may be a scala type that avro doesn't understand, so we must turn
    // it into an avro compatible type by using an encoder.
    schemaField[B](fieldName, namespace, annos, Default(encoder.encode(default, schemaFor.schema)))(schemaFor, namingStrategy)
  }

  /**
    * Builds an Avro Field with the field's Schema provided by an
    * implicit instance of [[SchemaFor]]. There must be a instance of this
    * typeclass in scope for any type we want to support in avro4s.
    *
    * Users can add their own mappings for types by implementing a [[SchemaFor]]
    * instance for that type.
    *
    * @param fieldName the name of the field as defined in the case class
    * @param namespace the name of the package that contains the case class definition
    * @param default   an instance of the Default ADT which contains an avro compatible default value
    *                  if such a default applies to this field
    */
  def schemaField[B](fieldName: String, namespace: String, annos: Seq[Anno], default: Default)
                    (implicit schemaFor: SchemaFor[B], namingStrategy: NamingStrategy = DefaultNamingStrategy): Schema.Field = {

    val extractor = new AnnotationExtractors(annos)
    val doc = extractor.doc.orNull
    val aliases = extractor.aliases
    val props = extractor.props

    // the name could have been overriden with @AvroName, and then must be encoded with the naming strategy
    val name = extractor.name.fold(namingStrategy.to(fieldName))(namingStrategy.to)

    // the special NullDefault is used when null is actually the default value.
    // The case of having no default at all is represented by NoDefault
    val encodedDefault: AnyRef = default match {
      case NoDefault => null
      case NullDefault => JsonProperties.NULL_VALUE
      case MethodDefault(x) => DefaultResolver(x, schemaFor.schema)
    }

    // if we have annotated with @AvroFixed then we override the type and change it to a Fixed schema
    // if someone puts @AvroFixed on a complex type, it makes no sense, but that's their cross to bear
    val schema = extractor.fixed.fold(schemaFor.schema) { size =>
      SchemaBuilder.fixed(name).doc(doc).namespace(namespace).size(size)
    }

    // for a union the type that has a default must be first
    // if there is no default then we'll move null to head (if present)
    val schemaWithOrderedUnion = (schema.getType, encodedDefault) match {
      case (Schema.Type.UNION, null) => SchemaHelper.moveDefaultToHead(schema, null)
      case (Schema.Type.UNION, JsonProperties.NULL_VALUE) => SchemaHelper.moveDefaultToHead(schema, null)
      case (Schema.Type.UNION, defaultValue) => SchemaHelper.moveDefaultToHead(schema, defaultValue)
      case _ => schema
    }

    // the field can override the namespace if the Namespace annotation is present on the field
    // we may have annotated our field with @AvroNamespace so this namespace should be applied
    // to any schemas we have generated for this field
    val schemaWithResolvedNamespace = extractor.namespace.map(overrideNamespace(schemaWithOrderedUnion, _)).getOrElse(schemaWithOrderedUnion)

    val field = new Schema.Field(name, schemaWithResolvedNamespace, doc, encodedDefault)
    props.foreach { case (k, v) => field.addProp(k, v: AnyRef) }
    aliases.foreach(field.addAlias)
    field
  }

  /**
    * Builds a new Avro Schema.
    *
    * @param name the encoded Avro record name, taking into account
    *             annnotations and type parameters.
    */
  def buildSchema(name: String,
                  namespace: String,
                  fields: Seq[Schema.Field],
                  annotations: Seq[Anno],
                  valueType: Boolean): Schema = {

    import scala.collection.JavaConverters._

    val extractor = new AnnotationExtractors(annotations)
    val doc = extractor.doc.orNull
    val aliases = extractor.aliases
    val props = extractor.props

    // if the class is a value type, then we need to use the schema for the single field of the type
    // if we have a value type AND @AvroFixed is present, then we return a schema of type fixed
    if (valueType) {
      val field = fields.head
      extractor.fixed.fold(field.schema) { size =>
        val builder = SchemaBuilder.fixed(name).doc(doc).namespace(namespace).aliases(aliases: _*)
        props.foreach { case (k, v) => builder.prop(k, v) }
        builder.size(size)
      }
    } else {
      val record = Schema.createRecord(name, doc, namespace, false)
      aliases.foreach(record.addAlias)
      props.foreach { case (k, v) => record.addProp(k: String, v: AnyRef) }
      record.setFields(fields.asJava)
      record
    }
  }

  // accepts a built avro schema, and overrides the namespace with the given namespace
  // this method just just makes a copy of the existing schema, setting the new namespace
  private def overrideNamespace(schema: Schema, namespace: String): Schema = {
    schema.getType match {
      case Schema.Type.RECORD =>
        val fields = schema.getFields.asScala.map { field =>
          new Schema.Field(field.name(), overrideNamespace(field.schema(), namespace), field.doc, field.defaultVal, field.order)
        }
        val copy = Schema.createRecord(schema.getName, schema.getDoc, namespace, schema.isError, fields.asJava)
        schema.getAliases.asScala.foreach(copy.addAlias)
        schema.getObjectProps.asScala.foreach { case (k, v) => copy.addProp(k, v) }
        copy
      case Schema.Type.UNION => Schema.createUnion(schema.getTypes.asScala.map(overrideNamespace(_, namespace)).asJava)
      case Schema.Type.ENUM => Schema.createEnum(schema.getName, schema.getDoc, namespace, schema.getEnumSymbols)
      case Schema.Type.FIXED => Schema.createFixed(schema.getName, schema.getDoc, namespace, schema.getFixedSize)
      case Schema.Type.MAP => Schema.createMap(overrideNamespace(schema.getValueType, namespace))
      case Schema.Type.ARRAY => Schema.createArray(overrideNamespace(schema.getElementType, namespace))
      case _ => schema
    }
  }
}

sealed trait Default

object Default {
  def apply(x: AnyRef): Default = if (x == null) NullDefault else MethodDefault(x)
}

case class MethodDefault(value: AnyRef) extends Default
case object NullDefault extends Default
case object NoDefault extends Default
